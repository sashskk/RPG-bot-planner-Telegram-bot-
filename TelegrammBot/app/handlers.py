from aiogram import types
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram import F, Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from script import base_xp
from database.actual_bd import create_pool, add_user, get_user, add_quest, get_quests, show_quests, show_profile
import app.keyboards as kb

pool = None
router = Router()


class Register(StatesGroup):
    name = State()
    goal = State()


class Addquest(StatesGroup):
    add_quest = State()
    complete_quest1 = State()


class Allocatepoints(StatesGroup):
    allocate_points = State()


@router.message(CommandStart())
async def handle_start(message: types.Message):
    await message.answer(text=f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –º–æ–µ–º –±–æ—Ç–µ'
                              f'\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å!',
                         reply_markup=kb.register)


@router.message(Command('help'))
async def handle_help(message: types.Message):
    await message.answer(text='üÜò <b>–ü–æ–º–æ—â—å</b>\n\n'
                              'üìã –ü—Ä–æ—Ñ–∏–ª—å ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å, –æ–ø—ã—Ç, –∑–æ–ª–æ—Ç–æ –∏ —Å—Ç–∞—Ç—É.\n'
                              'üìú –ú–æ–∏ –∫–≤–µ—Å—Ç—ã ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≤—ã–ø–æ–ª–Ω—è–µ—à—å.\n'
                              '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–≤–µ—Å—Ç ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ –Ω–µ–≥–æ –Ω–∞–≥—Ä–∞–¥—ã.\n'
                              'üèÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–≤–µ—Å—Ç ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∏ –∑–∞–±—Ä–∞—Ç—å XP –∏ –º–æ–Ω–µ—Ç—ã.\n\n'
                              'üí° –°–æ–≤–µ—Ç: –Ω–∞—á–∏–Ω–∞–π —Å –ø—Ä–æ—Å—Ç—ã—Ö –∫–≤–µ—Å—Ç–æ–≤, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø—Ä–æ–∫–∞—á–∏–≤–∞—è —É—Ä–æ–≤–µ–Ω—å –∏ –ø–æ–ª—É—á–∞—è –Ω–∞–≥—Ä–∞–¥—ã!')


@router.message(lambda m: m.text == '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å!')
async def process_create_profile(message: Message, state: FSMContext):
    await state.set_state(Register.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')


@router.message(Register.name)
async def register_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Register.goal)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å')


@router.message(Register.goal)
async def register_goal(message: Message, state: FSMContext):
    global pool
    if not pool:
        pool = await create_pool()
    await state.update_data(goal=message.text)
    user_data = await state.get_data()
    name = user_data['name']
    goal = user_data['goal']
    await add_user(pool, message.from_user.id, name, goal)
    await message.answer(f'‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω! \n–ò–º—è: {name} \n–¶–µ–ª—å: {goal}', reply_markup=kb.main)
    await state.clear()


@router.message(lambda m: m.text == 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å')
async def show_user_profile(message: Message):
    global pool
    if not pool:
        pool = await create_pool()
    text = await show_profile(pool, message.from_user.id)
    await message.answer(text, reply_markup=kb.main)
    user, stats = await get_user(pool, message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. \n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=kb.register)
        return


@router.message(lambda m: m.text == 'üìú –ú–æ–∏ –∫–≤–µ—Å—Ç—ã')
async def show_user_quests(message: Message):
    global pool
    if not pool:
        pool = await create_pool()
    text = await show_quests(pool, message.from_user.id)
    await message.answer(text, reply_markup=kb.complete_main)
    user = await get_user(pool, message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. \n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=kb.register)
        return


@router.message(lambda m: m.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–≤–µ—Å—Ç')
async def adding_quest(message: Message, state: FSMContext):
    await state.set_state(Addquest.add_quest)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–≤–µ—Å—Ç')


@router.message(Addquest.add_quest)
async def adding_quest1(message: Message, state: FSMContext):
    await state.update_data(add_quest=message.text)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–≤–µ—Å—Ç–∞', reply_markup=kb.categories)
    user, stats = await get_user(pool, message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. \n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=kb.register)
        await state.clear()
        return


@router.callback_query(F.data.in_(['intelligence', 'strength']))
async def process_category(callback: CallbackQuery, state: FSMContext):
    global pool
    if not pool:
        pool = await create_pool()

    user_data = await state.get_data()
    quest_title = user_data.get('add_quest')
    category = callback.data
    user, stats = await get_user(pool, callback.from_user.id)
    if not user:
        await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. \n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=kb.register)
        return
    stat_level = stats[category]
    base = base_xp.get(category, 10)
    reward_xp = int(base * (1 + (stat_level - 1) * 0.5))
    await add_quest(pool, callback.from_user.id, quest_title, category, reward_xp)
    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
    await callback.message.answer(
        f'‚úÖ –ö–≤–µ—Å—Ç "{quest_title}" –¥–æ–±–∞–≤–ª–µ–Ω!\nüìÇ–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\nüèÜ–ù–∞–≥—Ä–∞–¥–∞: {reward_xp} XP',
        reply_markup=kb.main
    )
    await state.clear()


@router.message(lambda m: m.text == 'üõ†Ô∏è –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—á–∫–∏')
async def allocating(message: Message, state: FSMContext):
    await state.set_state(Allocatepoints.allocate_points)
    user, stats = await get_user(pool, message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. \n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=kb.register)
        await state.clear()
        return
    if user['skill_points'] <= 0:
        await message.answer('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—á–∫–æ–≤')
        await state.clear()
        return
    await state.set_state(Allocatepoints.allocate_points)
    await message.answer(
        f'–£ –≤–∞—Å {user["skill_points"]} —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ—á–∫–æ–≤. \n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏:',
        reply_markup=kb.stats
    )


@router.callback_query(F.data.startswith('stat_'))
async def process_stats(callback: CallbackQuery, state: FSMContext):
    global pool
    if not pool:
        pool = await create_pool()

    stat = callback.data.split('_', 1)[1]
    user, stats = await get_user(pool, callback.from_user.id)

    if not user:
        await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. \n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=kb.register)
        await state.clear()
        return

    if user['skill_points'] <= 0:
        await callback.message.answer('‚ùå –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –æ—á–∫–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è.')
        await state.clear()

        return

    async with pool.acquire() as conn:
        await conn.execute(
            f'UPDATE stats SET {stat} = {stat} + 1 WHERE user_id=$1',
            callback.from_user.id
        )
        await conn.execute(
            f'UPDATE users SET skill_points = skill_points - 1 WHERE id=$1',
            callback.from_user.id
        )

    await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–∞—Ç')
    await callback.message.answer(
        f'‚úÖ {stat.capitalize()} —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞ 1!\n'
        f'–û—Å—Ç–∞–ª–æ—Å—å –æ—á–∫–æ–≤: {user["skill_points"] - 1}',
        reply_markup=kb.main
    )
    await state.clear()


@router.message(lambda m: m.text == '‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–≤–µ—Å—Ç')
async def adding_quest(message: Message, state: FSMContext):
    user, stats = await get_user(pool, message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. \n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=kb.register)
        await state.clear()
        return

    await state.set_state(Addquest.complete_quest1)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å')


@router.message(Addquest.complete_quest1)
async def adding_quest1(message: Message, state: FSMContext):
    global pool
    if not pool:
        pool = await create_pool()

    user_id = message.from_user.id
    quests = await get_quests(pool, user_id)
    user, stats = await get_user(pool, message.from_user.id)

    if not user:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. \n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å", reply_markup=kb.register)
        await state.clear()
        return

    if not message.text.isdigit():
        await message.answer('‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–≤–µ—Å—Ç–∞')
        return
    quest_number = int(message.text)

    if quest_number < 1 or quest_number > len(quests):
        await message.answer('‚ùå –¢–∞–∫–æ–≥–æ –∫–≤–µ—Å—Ç–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        return
    quest = quests[quest_number - 1]

    if quest['done']:
        await message.answer('‚ùå –≠—Ç–æ—Ç –∫–≤–µ—Å—Ç —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω. \n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π')
        return

    stat_key = quest['category']
    stat_level = stats[stat_key]
    base = quest['reward_xp']
    final_xp = int(base * (1 + (stat_level - 1) * 0.5))

    async with pool.acquire() as conn:
        await conn.execute(
            'UPDATE quests SET done=TRUE WHERE id=$1',
            quest['id'],)

        new_xp= user['xp'] + final_xp
        new_gold = user['gold'] + 5
        new_level = user['level']
        new_points = user['skill_points']
        bonus_gold = 10 * user['level']

        needed_xp = new_level * 100
        if new_xp >= needed_xp:
            new_level += 1
            new_points += 2
            new_gold += bonus_gold
            new_xp = new_xp - needed_xp

        await conn.execute(
            'UPDATE users SET xp=$1, gold=$2, level=$3, skill_points=$4 WHERE id=$5',
            new_xp, new_gold, new_level, new_points, user_id
        )

    await message.answer(f'‚úÖ –ö–≤–µ—Å—Ç "{quest["title"]}" –≤—ã–ø–æ–ª–Ω–µ–Ω!\n'
                         f'–í—ã –ø–æ–ª—É—á–∏–ª–∏ {final_xp} XP\n'
                         f'–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 5 –º–æ–Ω–µ—Ç \n')

    if new_level > user['level']:
        await message.answer(f'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–≤—ã—Å–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å –¥–æ {new_level}!\n'
                             f'–í—ã –ø–æ–ª—É—á–∏–ª–∏ 2 –æ—á–∫–æ–≤ –ø—Ä–æ–∫–∞—á–∫–∏ –∏ {bonus_gold} –º–æ–Ω–µ—Ç!')
