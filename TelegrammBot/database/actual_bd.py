import asyncpg


async def create_pool():
    pool = await asyncpg.create_pool(
        #your database
    )
    return pool


async def add_user(pool, user_id, name, goal):
    async with pool.acquire() as conn:
        await conn.execute('''
            INSERT INTO users (id, name, goal, xp, level, skill_points, gold)
            VALUES ($1, $2, $3, 0, 1, 0, 0)
            ON CONFLICT (id) DO NOTHING
        ''', user_id, name, goal)
        await conn.execute('''
            INSERT INTO stats (user_id, intelligence, strength)
            VALUES ($1, 1, 1)
            ON CONFLICT (user_id) DO NOTHING
        ''', user_id)


async def get_user(pool, user_id):
    async with pool.acquire() as conn:
        user = await conn.fetchrow('SELECT * FROM users WHERE id=$1', user_id)
        stats = await conn.fetchrow('SELECT * FROM stats WHERE user_id=$1', user_id)
    return user, stats


async def add_quest(pool, user_id, title, category, reward_xp):
    async with pool.acquire() as conn:
        await conn.execute('''
            INSERT INTO quests (user_id, title, category, reward_xp, done)
            VALUES ($1, $2, $3, $4, FALSE)
        ''', user_id, title, category, reward_xp)


async def get_quests(pool, user_id):
    async with pool.acquire() as conn:
        return await conn.fetch('SELECT * FROM quests WHERE user_id=$1', user_id)


async def show_quests(pool, user_id: int):
    async with pool.acquire() as conn:
        rows = await conn.fetch(
            'SELECT id, title, category, reward_xp, done FROM quests WHERE user_id=$1 ORDER BY id', user_id
        )
    if not rows:
        return "üìú - –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤. \n–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
    text = "üìú <b>–í–∞—à–∏ –∫–≤–µ—Å—Ç—ã:</b> \n\n"
    for i, quest in enumerate(rows, 1):
        if quest['done'] == True:
            done = '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω'
        else:
            done = '‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω'
        text += (f" {i}. {quest['title']}\n"
                 f"    üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {quest['category']}\n"
                 f"    üèÜ –ù–∞–≥—Ä–∞–¥–∞: {quest['reward_xp']} XP\n"
                 f"    –°—Ç–∞—Ç—É—Å: {done}\n\n"
                 )
    return text


async def show_profile(pool, user_id: int):
    async with pool.acquire() as conn:
        user = await conn.fetchrow(
            'SELECT name, goal, xp, level, skill_points, gold FROM users WHERE id=$1',
            user_id
        )
        if not user:
            return "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        stats = await conn.fetchrow(
            'SELECT intelligence, strength FROM stats WHERE user_id=$1',
            user_id
        )
        quests = await conn.fetch(
            'SELECT title, category, reward_xp, done FROM quests WHERE user_id=$1 ORDER BY id',
            user_id
        )
    completed = 0
    not_completed = 0
    text = ""
    text += f"üë§ <b>–ò–º—è</b>: {user['name']}\n"
    text += f"üéØ <b>–¶–µ–ª—å</b>: {user['goal']}\n\n"
    text += f"‚≠êÔ∏è <b>–£—Ä–æ–≤–µ–Ω—å</b>: {user['level']}\n"
    text += f"üìà <b>–û–ø—ã—Ç</b>: {user['xp']}/{user['level'] * 100}\n"
    text += f"üíé <b>–ú–æ–Ω–µ—Ç—ã</b>: {user['gold']}\n"
    text += f"üõ†Ô∏è <b>–û—á–∫–∏ –ø—Ä–æ–∫–∞—á–∫–∏</b>: {user['skill_points']}\n\n"
    text += "üìä <b>–°—Ç–∞—Ç—ã:</b>\n"
    stats_dict = dict(stats)
    for stat, points in stats_dict.items():
        if stat.lower() == 'strength':
            emoji = 'üí™'
        elif stat.lower() == 'intelligence':
            emoji = 'üß†'
        else:
            emoji = '‚ö°Ô∏è'
        text += f" {emoji} {stat.capitalize()}: {points}\n"

    for quest in quests:
        if quest['done']:
            completed += 1
        else:
            not_completed += 1

    text += "\n------------------------\n\n"
    text += "üìú <b>–ö–≤–µ—Å—Ç—ã:</b>\n"
    if quests:
        text += f"–°–≤–æ–¥–∫–∞ –∫–≤–µ—Å—Ç–æ–≤: \n–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed} ‚úÖ\n–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {not_completed} ‚ùå\n\n"
    else:
        text += " - –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤\n"
    for i, quest in enumerate(quests, 1):
        if quest['done'] == True:
            done = '‚úÖ'
        else:
            done = '‚ùå'
    return text
